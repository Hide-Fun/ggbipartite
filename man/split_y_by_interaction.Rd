% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_interaction_coords.R
\name{split_y_by_interaction}
\alias{split_y_by_interaction}
\title{Split y-direction range by strictly positive interaction values (grouped by a single key) and add drawing coordinates}
\usage{
split_y_by_interaction(df, x_side = c("xmin", "xmax"), var)
}
\arguments{
\item{df}{A `data.frame`/`tibble` containing the required columns.}

\item{x_side}{One of `c("xmin","xmax")`. Chooses which side provides the x coordinate.}

\item{var}{Character scalar giving the column name to group by.}
}
\value{
A `tibble` with all original columns plus:
- `y_start`, `y_end`: start/end of the y-slice
- `x`, `xend`: x-coordinates for vertical segments (`xend == x`)
- `.input_row_id`: internal row ID to preserve global input order
}
\description{
Splits the y-range `[ymin, ymax]` within groups defined by a single key column
(`var`), proportionally to strictly positive `interaction` values. Computes
`y_start`/`y_end` and adds `x`/`xend` for vertical segment drawing.
}
\details{
- **Required columns**: the grouping key `var`, `xmin`, `xmax`, `ymin`, `ymax`, `interaction`.
  An error is raised if any are missing.
- **Validation**: `interaction` must be strictly positive (`> 0`) and non-missing for all rows.
- **Grouping**: by the single provided key `var` only. Bounds (`xmin/xmax/ymin/ymax`)
  are assumed to be fixed upstream and therefore excluded from grouping.
- **Coordinates**: if `x_side == "xmin"`, set `x = xmin`; if `"xmax"`, set `x = xmax`;
  in both cases `xend = x` (vertical segments).
}
\examples{
library(dplyr)

df <- tibble::tibble(
  row = c(1,1,1,2,2),
  column = c(1,1,1,1,1),
  xmin = 0, xmax = 1,
  ymin = 0, ymax = 1,
  interaction = c(0.2, 0.3, 0.5, 0.6, 0.4)
)

# Group by "row"
split_y_by_interaction(df, var = "row")

# Group by "column"
split_y_by_interaction(df, var = "column")

# Use xmax as x reference while grouping by "row"
split_y_by_interaction(df, x_side = "xmax", var = "row")

}
\seealso{
[dplyr::group_by()], [dplyr::arrange()]
}
